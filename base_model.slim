

initialize() {
	
	// setting parameters for running in slimgui which is comfy for setting up. Then one can run SLIM in CLI on a cluster by passing those parameters like this: slim -d u=1.25e-6 -d r=1e-8 -d N=500 ... base_model.slim 
	if (exists("slimgui")){
		setwd("/home/vasili/ebc/projects/SLiM/Anc_contr_basal_model");
		defineConstant("N", 5e2); // population size
		defineConstant("u", 1.25e-5); // mutation rate
		defineConstant("r", 1e-8); // recombination rate
		defineConstant("sd_beta", 0.1); // sd of the distribution where betas are drawn from (centered at 0)
		defineConstant("h2", 0.8); // set heritability to calcualte environmental noise sd
		defineConstant("w", INF); // omega - sd of the distibution of the fitnes function; INF results in neutrality
		defineConstant("opt", 0); // trait optimum
		defineConstant("l_chr", 5e1); // length of a single chromosome
		defineConstant("n_chr", 50); // number of chromosomes in the genome
	}
	
	defineConstant("G", 10*N); // number of generations to run the birn-in stage of the simulation. 10*N is a rule-of-thumb recommenation. We can use the trick of Yair and Coop: run 60-70% of the burn-in, save the resuts and use them for all simulations to save time.
	defineConstant("output_cycle", 1000); // print intermediate stats every <output_cycle> generation
	defineConstant("prefix", paste("N-" + N + "_l-" + l_chr + "_n-" + n_chr + "_w-" + w + "_sd_beta-" + sd_beta + "_h2-" + h2 + "_")); // print intermediate stats every <output_cycle> generation
	defineConstant("output_stats", paste(prefix + "output_stats.tsv")); // name of an output files with stats
	defineConstant("output_QTLs", paste(prefix + "output_QTLs.tsv")); // name of an output file with QTLs
	defineConstant("output_burn_file", paste(prefix + "output_burn_file")); // name of the output file with all the simulation to pick up at a later stage

	initializeMutationRate(u);
	
	// mutation types
	initializeMutationType("m1", 0.5, "f", 0.0);  // neut mutations
	m1.mutationStackPolicy = "f";
	
	initializeMutationType("m2", 0.5, "n", 0.0, sd_beta);  // QTL -- selection coefficients are actually effect sizes.
	m2.mutationStackPolicy = "f"; // subsequent mutations at a given position in a given chromosome will be effectively ignored
	// m2.mutationStackPolicy = "l";
	m2.convertToSubstitution = F; // maybe I'll use the approach of Yair and Coop - they convert fixed mutations to substitutions to save memory and include a step in the calculation of the phenotype to account for substitutions. But for now it stays this way.
	
	
	// two types genomic elements, each having only its specific type of mutations
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElementType("g2", m2, 1.0);
	
	// we want each chromosome to consist of 1 bp of type g2 in the middle and neutral g1 around it. The code below is doing this
	n_start = seq(0, n_chr*l_chr-1, by = l_chr);
	
	i = 0;
	
	while (i < length(n_start)){
		midpoint = asInteger(n_start[i] + l_chr/2);
		initializeGenomicElement(g1, n_start[i], midpoint - 2);
		initializeGenomicElement(g2, midpoint - 1, midpoint - 1);
		initializeGenomicElement(g1, midpoint, n_start[i] + l_chr - 1);
		i = i + 1;
	}
	
	
	// here we built a recombination map that will have recombination rate = r within the chromosome and 0.5 between chromosomes
	rates = rep(c(r,0.5), n_chr);
	rates = rates[0:(length(rates)-2)];
	ends1 = seq(l_chr-1, n_chr*l_chr-1, by = l_chr);
	ends2 = seq(l_chr, n_chr*l_chr, by = l_chr);
	ends = sort(c(ends1, ends2));
	ends = ends[0:(length(ends)-2)];
	initializeRecombinationRate(rates, ends);

}


// Make the QTL effects neutral --
// the assigned selection coefficients are actually how we track their effect sizes
// and we calculate fitness based on an individual's total phenotype each generation
// by changing the fitnessScaling attribute
mutationEffect(m2) {
	return 1.0;
}


// reschedulting block s1 - the end of the simulation - in an N-dependent manner
1 early() {
	community.rescheduleScriptBlock(s1, start=G, end=G);
	sim.addSubpop("p1", N);
	
	// starting files with some stats srom every 100 generations
	line = paste("Generation", "GV", "PV", "pheno_sd", "h2", "h2_emp", sep = "\t");
	writeFile(output_stats, line, append=T);

	// this is needed only if I do assortative mating or anything else with the tagF of individuals
	// p1.individuals.tagF = 0.0;
}



// calculate fitness for each individual; it is faster do update fitness scaling than to have a fitness callback
1: late(){
	
	
	//	add2pheno = 2*sum(sim.substitutions.selectionCoeff); // substitutions that contributes to all phenotype values, factor of 2 for homozygous. This is from Yair and Coop; if you want to activate this, don't forget to switch m2.convertToSubstitution to T. The only difference between the two methods should be memory usage
	
	inds = p1.individuals;
	genevalue = inds.sumOfMutationsOfType(m2); // obtaining the genetic value of each individual
	GV = asString(mean(genevalue)); // storing the mean GV for printing
	
	// next we generate noise and add it to the phenotype
	V_A = var(genevalue);
	V_E = (V_A - h2 * V_A) / h2;
	noise = rnorm(size(inds), 0, sqrt(V_E));
	phenotypes = genevalue + noise;
	
	// storing the phenotype of each individual in its TagF. So far I don't plan to use it but just in case (modeling assortative mating or some other more advanced stuff).
	//inds.tagF = phenotypes;
	
	PV = asString(mean(phenotypes)); // mean phenotype for printing
	h2_emp = var(genevalue) / var(phenotypes); // calculating narrow sense heritability (which in this model is equal to H)
	pheno_sd = sd(phenotypes); // recording standard deviation of the phenotype
	
	// calculating each individual's fitness using a Gaussian distribution with mean == opt and sd == w
	inds.fitnessScaling = exp(-((opt - phenotypes)^2) / (2*(w^2))) ;
	
	
	
	// printing out some info every 100 generations
	if (sim.cycle % output_cycle == 0){
		catn("Generation " + sim.cycle + " finished\n writing output");
		line = paste(sim.cycle, GV, PV, pheno_sd, h2, h2_emp, sep = "\t");
		writeFile(output_stats, line, append=T);
		
		
		
		// and also getting the position, allele frequency and beta of every QTL
		m2muts = sim.mutationsOfType(m2);
		m2muts = m2muts[order(m2muts.position)];
		pos = m2muts.position;
		betas = m2muts.selectionCoeff;
		freqs = sim.mutationFrequencies(NULL, m2muts);
		//	sim.outputMutations(m2muts);
		
		if(length(pos) > 0){
			// this writes a table with generation, QTLs positions, freq and betas. The only problem is that I didn't find a way to avoid column names to be printed out every time so will have to clean those post-factum
			gen = rep(sim.cycle, length(pos));
			df = DataFrame("Generation", gen, "pos", pos, "freq", freqs, "betas", betas);
			writeFile(output_QTLs, df.serialize("tsv"), append=T);
			//sim.outputFull();
		}
	
	}

}


// this is just to keep it at hand if I will ever need it. So far I don't plan to simulate assortative mating
//mateChoice() {
//	phenotype = individual.tagF;
//	others = sourceSubpop.individuals.tagF;
//	return weights * dnorm(others, phenotype, 5.0);
//}



// output data at end of simulation -- needed to continue the simulation


s1 50000 late() {
	// save the state of the simulation
	sim.outputFull(output_burn_file,binary=T);

	//	// output the substitution info to a file
	//	if(!writeFile(output_sub_file, asString(2*sum(sim.substitutions.selectionCoeff)) )){stop("Error writing substitutions file.");}
	//	
	// writeFile(output_file, asString(2*sum(sim.substitutions.selectionCoeff)) );
	// end simulation
	sim.simulationFinished();
}





// one can add a tag to each mutation in all genomes in a subpopulation like this 
// sim.subpopulations.genomes.mutations.tag = sim.subpopulations.id
// I can do this just before the admixture to label local ancestry - not the origin of the mutation but which subpop did this specific mutation copy came from in the process of admixture